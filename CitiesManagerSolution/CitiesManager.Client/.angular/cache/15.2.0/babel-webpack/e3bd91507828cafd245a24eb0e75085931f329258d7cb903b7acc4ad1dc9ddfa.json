{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CompareValidation } from '../validators/custom-validators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction RegisterComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Person Name can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Email can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Email should be in a proper email address format\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Phone number can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Password can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Confirm Password can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1, \"Password and confirm password do not match\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.isRegisterFormSubmitted = false;\n    this.registerForm = new FormGroup({\n      personName: new FormControl(null, [Validators.required]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      phoneNumber: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      confirmPassword: new FormControl(null, [Validators.required])\n    }, {\n      validators: [CompareValidation(\"password\", \"confirmPassword\")]\n    });\n  }\n  get register_personNameControl() {\n    return this.registerForm.controls[\"personName\"];\n  }\n  get register_emailControl() {\n    return this.registerForm.controls[\"email\"];\n  }\n  get register_phoneNumberControl() {\n    return this.registerForm.controls[\"phoneNumber\"];\n  }\n  get register_passwordControl() {\n    return this.registerForm.controls[\"password\"];\n  }\n  get register_confirmPasswordControl() {\n    return this.registerForm.controls[\"confirmPassword\"];\n  }\n  registerSubmitted() {\n    this.isRegisterFormSubmitted = true;\n    if (this.registerForm.valid) {\n      this.accountService.postRegister(this.registerForm.value).subscribe({\n        next: response => {\n          console.log(response);\n          this.isRegisterFormSubmitted = false;\n          this.router.navigate(['/cities']);\n          this.registerForm.reset();\n        },\n        error: error => {\n          console.log(error);\n        },\n        complete: () => {}\n      });\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 47,\n  vars: 8,\n  consts: [[1, \"w-75\", \"margin-auto\"], [1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-field\", \"flex\"], [1, \"w-25\"], [\"for\", \"personName\", 1, \"form-label\", \"pt\"], [1, \"flex-1\"], [\"type\", \"text\", \"id\", \"personName\", \"formControlName\", \"personName\", 1, \"form-input\"], [\"class\", \"text-red\", 4, \"ngIf\"], [\"for\", \"email\", 1, \"form-label\", \"pt\"], [\"type\", \"text\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-input\"], [\"for\", \"phoneNumber\", 1, \"form-label\", \"pt\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"formControlName\", \"phoneNumber\", 1, \"form-input\"], [\"for\", \"password\", 1, \"form-label\", \"pt\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-input\"], [\"for\", \"confirmPassword\", 1, \"form-label\", \"pt\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"formControlName\", \"confirmPassword\", 1, \"form-input\"], [\"type\", \"submit\", 1, \"button\", \"button-green-back\"], [1, \"text-red\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.registerSubmitted();\n      });\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Person Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelement(10, \"input\", 7);\n      i0.ɵɵtemplate(11, RegisterComponent_span_11_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 3)(13, \"div\", 4)(14, \"label\", 9);\n      i0.ɵɵtext(15, \"Email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 6);\n      i0.ɵɵelement(17, \"input\", 10);\n      i0.ɵɵtemplate(18, RegisterComponent_span_18_Template, 2, 0, \"span\", 8);\n      i0.ɵɵtemplate(19, RegisterComponent_span_19_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"div\", 3)(21, \"div\", 4)(22, \"label\", 11);\n      i0.ɵɵtext(23, \"Phone Number\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 6);\n      i0.ɵɵelement(25, \"input\", 12);\n      i0.ɵɵtemplate(26, RegisterComponent_span_26_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(27, \"div\", 3)(28, \"div\", 4)(29, \"label\", 13);\n      i0.ɵɵtext(30, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(31, \"div\", 6);\n      i0.ɵɵelement(32, \"input\", 14);\n      i0.ɵɵtemplate(33, RegisterComponent_span_33_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(34, \"div\", 3)(35, \"div\", 4)(36, \"label\", 15);\n      i0.ɵɵtext(37, \"Confirm Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(38, \"div\", 6);\n      i0.ɵɵelement(39, \"input\", 16);\n      i0.ɵɵtemplate(40, RegisterComponent_span_40_Template, 2, 0, \"span\", 8);\n      i0.ɵɵtemplate(41, RegisterComponent_span_41_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(42, \"div\", 3);\n      i0.ɵɵelement(43, \"div\", 4);\n      i0.ɵɵelementStart(44, \"div\", 6)(45, \"button\", 17);\n      i0.ɵɵtext(46, \"Register\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_personNameControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_personNameControl.errors == null ? null : ctx.register_personNameControl.errors[\"required\"]));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_emailControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_emailControl.errors == null ? null : ctx.register_emailControl.errors[\"required\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_emailControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_emailControl.errors == null ? null : ctx.register_emailControl.errors[\"email\"]));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_phoneNumberControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_phoneNumberControl.errors == null ? null : ctx.register_phoneNumberControl.errors[\"required\"]));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_passwordControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_passwordControl.errors == null ? null : ctx.register_passwordControl.errors[\"required\"]));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_confirmPasswordControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_confirmPasswordControl.errors == null ? null : ctx.register_confirmPasswordControl.errors[\"required\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.register_confirmPasswordControl.touched || ctx.isRegisterFormSubmitted) && (ctx.register_confirmPasswordControl.errors == null ? null : ctx.register_confirmPasswordControl.errors[\"compareValidator\"]));\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","CompareValidation","i0","RegisterComponent","constructor","accountService","router","registerForm","personName","required","email","phoneNumber","password","confirmPassword","validators","register_personNameControl","controls","register_emailControl","register_phoneNumberControl","register_passwordControl","register_confirmPasswordControl","registerSubmitted","isRegisterFormSubmitted","valid","postRegister","value","subscribe","next","response","console","log","navigate","reset","error","complete","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\CSharp Udemy\\CitiesManagerSolution\\CitiesManager.Client\\src\\app\\register\\register.component.ts","C:\\CSharp Udemy\\CitiesManagerSolution\\CitiesManager.Client\\src\\app\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RegisterUser } from '../models/register-user';\nimport { AccountService } from '../services/account.service';\nimport { CompareValidation } from '../validators/custom-validators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  isRegisterFormSubmitted: boolean = false;\n\n\n  constructor(private accountService: AccountService, private router: Router) {\n    this.registerForm = new FormGroup({\n      personName: new FormControl(null, [Validators.required]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      phoneNumber: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      confirmPassword: new FormControl(null, [Validators.required])\n    },\n      {\n        validators: [CompareValidation(\"password\", \"confirmPassword\")]\n      });\n  }\n\n\n  get register_personNameControl(): any {\n    return this.registerForm.controls[\"personName\"];\n  }\n\n  get register_emailControl(): any {\n    return this.registerForm.controls[\"email\"];\n  }\n\n  get register_phoneNumberControl(): any {\n    return this.registerForm.controls[\"phoneNumber\"];\n  }\n\n  get register_passwordControl(): any {\n    return this.registerForm.controls[\"password\"];\n  }\n\n  get register_confirmPasswordControl(): any {\n    return this.registerForm.controls[\"confirmPassword\"];\n  }\n\n  registerSubmitted() {\n    this.isRegisterFormSubmitted = true;\n\n    if (this.registerForm.valid) {\n\n      this.accountService.postRegister(this.registerForm.value).subscribe({\n        next: (response: RegisterUser) => {\n          console.log(response);\n\n          this.isRegisterFormSubmitted = false;\n\n          this.router.navigate(['/cities']);\n\n          this.registerForm.reset();\n        },\n\n        error: (error: any) => {\n          console.log(error);\n        },\n\n        complete: () => { },\n      });\n    }\n  }\n}\n","<div class=\"w-75 margin-auto\">\n  <div class=\"form-container\">\n\n    <h2>Register</h2>\n\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"registerSubmitted()\">\n\n      <!-- personName -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"personName\" class=\"form-label pt\">Person Name</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"text\" id=\"personName\" class=\"form-input\" formControlName=\"personName\" />\n          <span class=\"text-red\" *ngIf=\"(register_personNameControl.touched || isRegisterFormSubmitted) && (register_personNameControl.errors?.['required'])\">Person Name can't be blank</span>\n        </div>\n      </div>\n\n\n      <!-- email -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"email\" class=\"form-label pt\">Email</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"text\" id=\"email\" class=\"form-input\" formControlName=\"email\" />\n          <span class=\"text-red\" *ngIf=\"(register_emailControl.touched || isRegisterFormSubmitted) && (register_emailControl.errors?.['required'])\">Email can't be blank</span>\n\n          <span class=\"text-red\" *ngIf=\"(register_emailControl.touched || isRegisterFormSubmitted) && (register_emailControl.errors?.['email'])\">Email should be in a proper email address format</span>\n        </div>\n      </div>\n\n\n      <!-- phoneNumber -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"phoneNumber\" class=\"form-label pt\">Phone Number</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"text\" id=\"phoneNumber\" class=\"form-input\" formControlName=\"phoneNumber\" />\n          <span class=\"text-red\" *ngIf=\"(register_phoneNumberControl.touched || isRegisterFormSubmitted) && (register_phoneNumberControl.errors?.['required'])\">Phone number can't be blank</span>\n        </div>\n      </div>\n\n\n      <!-- password -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"password\" class=\"form-label pt\">Password</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"password\" id=\"password\" class=\"form-input\" formControlName=\"password\" />\n          <span class=\"text-red\" *ngIf=\"(register_passwordControl.touched || isRegisterFormSubmitted) && (register_passwordControl.errors?.['required'])\">Password can't be blank</span>\n        </div>\n      </div>\n\n\n      <!-- confirmPassword -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"confirmPassword\" class=\"form-label pt\">Confirm Password</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"password\" id=\"confirmPassword\" class=\"form-input\" formControlName=\"confirmPassword\" />\n          <span class=\"text-red\" *ngIf=\"(register_confirmPasswordControl.touched || isRegisterFormSubmitted) && (register_confirmPasswordControl.errors?.['required'])\">Confirm Password can't be blank</span>\n\n          <span class=\"text-red\" *ngIf=\"(register_confirmPasswordControl.touched || isRegisterFormSubmitted) && (register_confirmPasswordControl.errors?.['compareValidator'])\">Password and confirm password do not match</span>\n        </div>\n      </div>\n\n\n      <!-- submit -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n        </div>\n\n        <div class=\"flex-1\">\n         <button type=\"submit\" class=\"button button-green-back\">Register</button>\n        </div>\n      </div>\n\n    </form>\n\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}