{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CompareValidation } from '../validators/custom-validators';\nlet RegisterComponent = class RegisterComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.isRegisterFormSubmitted = false;\n    this.registerForm = new FormGroup({\n      personName: new FormControl(null, [Validators.required]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      phoneNumber: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      confirmPassword: new FormControl(null, [Validators.required])\n    }, {\n      validators: [CompareValidation(\"password\", \"confirmPassword\")]\n    });\n  }\n  get register_personNameControl() {\n    return this.registerForm.controls[\"personName\"];\n  }\n  get register_emailControl() {\n    return this.registerForm.controls[\"email\"];\n  }\n  get register_phoneNumberControl() {\n    return this.registerForm.controls[\"phoneNumber\"];\n  }\n  get register_passwordControl() {\n    return this.registerForm.controls[\"password\"];\n  }\n  get register_confirmPasswordControl() {\n    return this.registerForm.controls[\"confirmPassword\"];\n  }\n  registerSubmitted() {\n    this.isRegisterFormSubmitted = true;\n    if (this.registerForm.valid) {\n      this.accountService.postRegister(this.registerForm.value).subscribe({\n        next: response => {\n          console.log(response);\n          this.isRegisterFormSubmitted = false;\n          this.router.navigate(['/cities']);\n          this.registerForm.reset();\n        },\n        error: error => {\n          console.log(error);\n        },\n        complete: () => {}\n      });\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAInE,SAASC,iBAAiB,QAAQ,iCAAiC;AAO5D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,mBAAc,GAAdD,cAAc;IAA0B,WAAM,GAANC,MAAM;IAHlE,4BAAuB,GAAY,KAAK;IAItC,IAAI,CAACC,YAAY,GAAG,IAAIP,SAAS,CAAC;MAChCQ,UAAU,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACxDC,KAAK,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACS,KAAK,CAAC,CAAC;MACrEC,WAAW,EAAE,IAAIZ,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACzDG,QAAQ,EAAE,IAAIb,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACtDI,eAAe,EAAE,IAAId,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC;KAC7D,EACC;MACEK,UAAU,EAAE,CAACZ,iBAAiB,CAAC,UAAU,EAAE,iBAAiB,CAAC;KAC9D,CAAC;EACN;EAGA,IAAIa,0BAA0B;IAC5B,OAAO,IAAI,CAACR,YAAY,CAACS,QAAQ,CAAC,YAAY,CAAC;EACjD;EAEA,IAAIC,qBAAqB;IACvB,OAAO,IAAI,CAACV,YAAY,CAACS,QAAQ,CAAC,OAAO,CAAC;EAC5C;EAEA,IAAIE,2BAA2B;IAC7B,OAAO,IAAI,CAACX,YAAY,CAACS,QAAQ,CAAC,aAAa,CAAC;EAClD;EAEA,IAAIG,wBAAwB;IAC1B,OAAO,IAAI,CAACZ,YAAY,CAACS,QAAQ,CAAC,UAAU,CAAC;EAC/C;EAEA,IAAII,+BAA+B;IACjC,OAAO,IAAI,CAACb,YAAY,CAACS,QAAQ,CAAC,iBAAiB,CAAC;EACtD;EAEAK,iBAAiB;IACf,IAAI,CAACC,uBAAuB,GAAG,IAAI;IAEnC,IAAI,IAAI,CAACf,YAAY,CAACgB,KAAK,EAAE;MAE3B,IAAI,CAAClB,cAAc,CAACmB,YAAY,CAAC,IAAI,CAACjB,YAAY,CAACkB,KAAK,CAAC,CAACC,SAAS,CAAC;QAClEC,IAAI,EAAGC,QAAsB,IAAI;UAC/BC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;UAErB,IAAI,CAACN,uBAAuB,GAAG,KAAK;UAEpC,IAAI,CAAChB,MAAM,CAACyB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;UAEjC,IAAI,CAACxB,YAAY,CAACyB,KAAK,EAAE;QAC3B,CAAC;QAEDC,KAAK,EAAGA,KAAK,IAAI;UACfJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;QACpB,CAAC;QAEDC,QAAQ,EAAE,MAAK,CAAG;OACnB,CAAC;;EAEN;CACD;AA/DY/B,iBAAiB,eAL7BL,SAAS,CAAC;EACTqC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWlC,iBAAiB,CA+D7B;SA/DYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","CompareValidation","RegisterComponent","constructor","accountService","router","registerForm","personName","required","email","phoneNumber","password","confirmPassword","validators","register_personNameControl","controls","register_emailControl","register_phoneNumberControl","register_passwordControl","register_confirmPasswordControl","registerSubmitted","isRegisterFormSubmitted","valid","postRegister","value","subscribe","next","response","console","log","navigate","reset","error","complete","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\CSharp Udemy\\CitiesManagerSolution\\CitiesManager.Client\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RegisterUser } from '../models/register-user';\nimport { AccountService } from '../services/account.service';\nimport { CompareValidation } from '../validators/custom-validators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  isRegisterFormSubmitted: boolean = false;\n\n\n  constructor(private accountService: AccountService, private router: Router) {\n    this.registerForm = new FormGroup({\n      personName: new FormControl(null, [Validators.required]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      phoneNumber: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      confirmPassword: new FormControl(null, [Validators.required])\n    },\n      {\n        validators: [CompareValidation(\"password\", \"confirmPassword\")]\n      });\n  }\n\n\n  get register_personNameControl(): any {\n    return this.registerForm.controls[\"personName\"];\n  }\n\n  get register_emailControl(): any {\n    return this.registerForm.controls[\"email\"];\n  }\n\n  get register_phoneNumberControl(): any {\n    return this.registerForm.controls[\"phoneNumber\"];\n  }\n\n  get register_passwordControl(): any {\n    return this.registerForm.controls[\"password\"];\n  }\n\n  get register_confirmPasswordControl(): any {\n    return this.registerForm.controls[\"confirmPassword\"];\n  }\n\n  registerSubmitted() {\n    this.isRegisterFormSubmitted = true;\n\n    if (this.registerForm.valid) {\n\n      this.accountService.postRegister(this.registerForm.value).subscribe({\n        next: (response: RegisterUser) => {\n          console.log(response);\n\n          this.isRegisterFormSubmitted = false;\n\n          this.router.navigate(['/cities']);\n\n          this.registerForm.reset();\n        },\n\n        error: (error) => {\n          console.log(error);\n        },\n\n        complete: () => { },\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}