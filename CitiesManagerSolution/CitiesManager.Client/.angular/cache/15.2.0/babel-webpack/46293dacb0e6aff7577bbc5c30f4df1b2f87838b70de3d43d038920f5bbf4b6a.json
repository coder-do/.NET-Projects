{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction LoginComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"Email can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \"Password can't be blank\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.isLoginFormSubmitted = false;\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required])\n    });\n  }\n  get login_emailControl() {\n    return this.loginForm.controls[\"email\"];\n  }\n  get login_passwordControl() {\n    return this.loginForm.controls[\"password\"];\n  }\n  loginSubmitted() {\n    this.isLoginFormSubmitted = true;\n    if (this.loginForm.valid) {\n      this.accountService.postLogin(this.loginForm.value).subscribe({\n        next: response => {\n          console.log(response);\n          this.isLoginFormSubmitted = false;\n          this.accountService.currentUserName = response.email;\n          localStorage['token'] = response.token;\n          this.router.navigate(['/cities']);\n          this.loginForm.reset();\n        },\n        error: error => {\n          console.log(error);\n        },\n        complete: () => {}\n      });\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 24,\n  vars: 3,\n  consts: [[1, \"w-75\", \"margin-auto\"], [1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-field\", \"flex\"], [1, \"w-25\"], [\"for\", \"email\", 1, \"form-label\", \"pt\"], [1, \"flex-1\"], [\"type\", \"text\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-input\"], [\"class\", \"text-red\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"form-label\", \"pt\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-input\"], [\"type\", \"submit\", 1, \"button\", \"button-green-back\"], [1, \"text-red\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n      i0.ɵɵtext(3, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.loginSubmitted();\n      });\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"Email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 6);\n      i0.ɵɵelement(10, \"input\", 7);\n      i0.ɵɵtemplate(11, LoginComponent_span_11_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 3)(13, \"div\", 4)(14, \"label\", 9);\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 6);\n      i0.ɵɵelement(17, \"input\", 10);\n      i0.ɵɵtemplate(18, LoginComponent_span_18_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 3);\n      i0.ɵɵelement(20, \"div\", 4);\n      i0.ɵɵelementStart(21, \"div\", 6)(22, \"button\", 11);\n      i0.ɵɵtext(23, \"Login\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.login_emailControl.touched || ctx.isLoginFormSubmitted) && (ctx.login_emailControl.errors == null ? null : ctx.login_emailControl.errors[\"required\"]));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (ctx.login_passwordControl.touched || ctx.isLoginFormSubmitted) && (ctx.login_passwordControl.errors == null ? null : ctx.login_passwordControl.errors[\"required\"]));\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;ICezDC,gCAAiI;IAAAA,oCAAoB;IAAAA,iBAAO;;;;;IAc5JA,gCAAuI;IAAAA,uCAAuB;IAAAA,iBAAO;;;ADnB/K,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,mBAAc,GAAdD,cAAc;IAA0B,WAAM,GAANC,MAAM;IAHlE,yBAAoB,GAAY,KAAK;IAInC,IAAI,CAACC,SAAS,GAAG,IAAIP,SAAS,CAAC;MAC7BQ,KAAK,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACO,KAAK,CAAC,CAAC;MACrEE,QAAQ,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC;KACtD,CAAC;EACJ;EAGA,IAAIE,kBAAkB;IACpB,OAAO,IAAI,CAACJ,SAAS,CAACK,QAAQ,CAAC,OAAO,CAAC;EACzC;EAEA,IAAIC,qBAAqB;IACvB,OAAO,IAAI,CAACN,SAAS,CAACK,QAAQ,CAAC,UAAU,CAAC;EAC5C;EAGAE,cAAc;IACZ,IAAI,CAACC,oBAAoB,GAAG,IAAI;IAEhC,IAAI,IAAI,CAACR,SAAS,CAACS,KAAK,EAAE;MAExB,IAAI,CAACX,cAAc,CAACY,SAAS,CAAC,IAAI,CAACV,SAAS,CAACW,KAAK,CAAC,CAACC,SAAS,CAAC;QAC5DC,IAAI,EAAGC,QAAa,IAAI;UACtBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;UAErB,IAAI,CAACN,oBAAoB,GAAG,KAAK;UACjC,IAAI,CAACV,cAAc,CAACmB,eAAe,GAAGH,QAAQ,CAACb,KAAK;UACpDiB,YAAY,CAAC,OAAO,CAAC,GAAGJ,QAAQ,CAACK,KAAK;UAEtC,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;UAEjC,IAAI,CAACpB,SAAS,CAACqB,KAAK,EAAE;QACxB,CAAC;QAEDC,KAAK,EAAGA,KAAK,IAAI;UACfP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;QACpB,CAAC;QAEDC,QAAQ,EAAE,MAAK,CAAG;OACnB,CAAC;;EAEN;;AA/CW3B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BjC,8BAA8B;MAGtBA,qBAAK;MAAAA,iBAAK;MAEdA,+BAA4D;MAA9BA;QAAA,OAAYkC,oBAAgB;MAAA,EAAC;MAIzDlC,8BAA6B;MAEgBA,qBAAK;MAAAA,iBAAQ;MAGxDA,8BAAoB;MAClBA,4BAA2E;MAC3EA,mEAA4J;MAC9JA,iBAAM;MAMRA,+BAA6B;MAEmBA,yBAAQ;MAAAA,iBAAQ;MAG9DA,+BAAoB;MAClBA,6BAAqF;MACrFA,mEAAqK;MACvKA,iBAAM;MAMRA,+BAA6B;MAC3BA,0BACM;MAENA,+BAAoB;MACqCA,sBAAK;MAAAA,iBAAS;;;MArCrEA,eAAuB;MAAvBA,yCAAuB;MAWCA,eAAuG;MAAvGA,iLAAuG;MAcvGA,eAA6G;MAA7GA,0LAA6G","names":["FormControl","FormGroup","Validators","i0","LoginComponent","constructor","accountService","router","loginForm","email","required","password","login_emailControl","controls","login_passwordControl","loginSubmitted","isLoginFormSubmitted","valid","postLogin","value","subscribe","next","response","console","log","currentUserName","localStorage","token","navigate","reset","error","complete","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\CSharp Udemy\\CitiesManagerSolution\\CitiesManager.Client\\src\\app\\login\\login.component.ts","C:\\CSharp Udemy\\CitiesManagerSolution\\CitiesManager.Client\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LoginUser } from '../models/login-user';\nimport { AccountService } from '../services/account.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  isLoginFormSubmitted: boolean = false;\n\n\n  constructor(private accountService: AccountService, private router: Router) {\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      password: new FormControl(null, [Validators.required]),\n    });\n  }\n\n\n  get login_emailControl(): any {\n    return this.loginForm.controls[\"email\"];\n  }\n\n  get login_passwordControl(): any {\n    return this.loginForm.controls[\"password\"];\n  }\n\n\n  loginSubmitted() {\n    this.isLoginFormSubmitted = true;\n\n    if (this.loginForm.valid) {\n\n      this.accountService.postLogin(this.loginForm.value).subscribe({\n        next: (response: any) => {\n          console.log(response);\n\n          this.isLoginFormSubmitted = false;\n          this.accountService.currentUserName = response.email;\n          localStorage['token'] = response.token;\n\n          this.router.navigate(['/cities']);\n\n          this.loginForm.reset();\n        },\n\n        error: (error) => {\n          console.log(error);\n        },\n\n        complete: () => { },\n      });\n    }\n  }\n}\n","<div class=\"w-75 margin-auto\">\n  <div class=\"form-container\">\n\n    <h2>Login</h2>\n\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginSubmitted()\">\n\n\n      <!-- email -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"email\" class=\"form-label pt\">Email</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"text\" id=\"email\" class=\"form-input\" formControlName=\"email\" />\n          <span class=\"text-red\" *ngIf=\"(login_emailControl.touched || isLoginFormSubmitted) && (login_emailControl.errors?.['required'])\">Email can't be blank</span>\n        </div>\n      </div>\n\n\n\n      <!-- password -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n          <label for=\"password\" class=\"form-label pt\">Password</label>\n        </div>\n\n        <div class=\"flex-1\">\n          <input type=\"password\" id=\"password\" class=\"form-input\" formControlName=\"password\" />\n          <span class=\"text-red\" *ngIf=\"(login_passwordControl.touched || isLoginFormSubmitted) && (login_passwordControl.errors?.['required'])\">Password can't be blank</span>\n        </div>\n      </div>\n\n\n\n      <!-- submit -->\n      <div class=\"form-field flex\">\n        <div class=\"w-25\">\n        </div>\n\n        <div class=\"flex-1\">\n          <button type=\"submit\" class=\"button button-green-back\">Login</button>\n        </div>\n      </div>\n\n    </form>\n\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}